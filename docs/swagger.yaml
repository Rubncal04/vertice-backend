basePath: /api/v1
definitions:
  handler.ErrorResponse:
    properties:
      error:
        example: error message
        type: string
    type: object
  handler.OrderItemResponse:
    properties:
      id:
        example: 1
        type: integer
      product:
        $ref: '#/definitions/handler.ProductSummary'
      product_id:
        example: 1
        type: integer
      quantity:
        example: 2
        type: integer
      subtotal:
        example: 2599.98
        type: number
      unit_price:
        example: 1299.99
        type: number
    type: object
  handler.OrderResponse:
    properties:
      created_at:
        example: "2024-01-15T10:30:00Z"
        type: string
      id:
        example: 1
        type: integer
      items:
        items:
          $ref: '#/definitions/handler.OrderItemResponse'
        type: array
      status:
        example: pending
        type: string
      total_amount:
        example: 2599.98
        type: number
      updated_at:
        example: "2024-01-15T10:30:00Z"
        type: string
    type: object
  handler.ProductResponse:
    properties:
      code:
        example: PROD001
        type: string
      description:
        example: Laptop para gaming
        type: string
      id:
        example: 1
        type: integer
      name:
        example: Laptop
        type: string
      price:
        example: 1299.99
        type: number
      stock:
        example: 10
        type: integer
    type: object
  handler.ProductSummary:
    properties:
      code:
        example: PROD001
        type: string
      id:
        example: 1
        type: integer
      name:
        example: Laptop Gaming
        type: string
      price:
        example: 1299.99
        type: number
    type: object
  handler.createProductRequest:
    properties:
      code:
        example: PROD001
        type: string
      description:
        example: Laptop para gaming de alta performance
        type: string
      name:
        example: Laptop Gaming
        type: string
      price:
        example: 1299.99
        type: number
      stock:
        example: 10
        type: integer
    type: object
  handler.loginRequest:
    properties:
      email:
        example: john@example.com
        type: string
      password:
        example: password123
        type: string
    type: object
  handler.loginResponse:
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    type: object
  handler.registerRequest:
    properties:
      email:
        example: john@example.com
        type: string
      name:
        example: John Doe
        type: string
      password:
        example: password123
        type: string
    type: object
  handler.updateOrderStatusRequest:
    properties:
      status:
        example: processing
        type: string
    type: object
  handler.updateProductRequest:
    properties:
      code:
        example: PROD001
        type: string
      description:
        example: Laptop para gaming de alta performance actualizada
        type: string
      name:
        example: Laptop Gaming Pro
        type: string
      price:
        example: 1399.99
        type: number
      stock:
        example: 15
        type: integer
    type: object
  handler.updateStockRequest:
    properties:
      stockDelta:
        example: 5
        type: integer
    type: object
  handler.userResponse:
    properties:
      email:
        example: john@example.com
        type: string
      id:
        example: 1
        type: integer
      name:
        example: John Doe
        type: string
    type: object
  service.CreateOrderRequest:
    properties:
      items:
        items:
          $ref: '#/definitions/service.OrderItemRequest'
        type: array
    type: object
  service.OrderItemRequest:
    properties:
      product_id:
        type: integer
      quantity:
        type: integer
    type: object
host: localhost:8080
info:
  contact: {}
  description: API System for managing products and orders of Vertice
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Vertice Backend API
  version: "1.0"
paths:
  /orders:
    get:
      consumes:
      - application/json
      description: Get all orders of the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handler.OrderResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List orders of the authenticated user
      tags:
      - orders
    post:
      consumes:
      - application/json
      description: Create a new order for the authenticated user
      parameters:
      - description: Order data
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/service.CreateOrderRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handler.OrderResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new order
      tags:
      - orders
  /orders/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an order of the authenticated user
      parameters:
      - description: ID de la orden
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete an order
      tags:
      - orders
    get:
      consumes:
      - application/json
      description: Get a specific order by the authenticated user's ID
      parameters:
      - description: ID de la orden
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.OrderResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a specific order
      tags:
      - orders
  /orders/{id}/cancel:
    patch:
      consumes:
      - application/json
      description: Cancel an existing order of the authenticated user
      parameters:
      - description: ID de la orden
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.OrderResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Cancel an order
      tags:
      - orders
  /orders/{id}/status:
    patch:
      consumes:
      - application/json
      description: Update the status of an existing order
      parameters:
      - description: ID de la orden
        in: path
        name: id
        required: true
        type: integer
      - description: Nuevo estado
        in: body
        name: status
        required: true
        schema:
          $ref: '#/definitions/handler.updateOrderStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.OrderResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update the status of an order
      tags:
      - orders
  /products:
    get:
      consumes:
      - application/json
      description: Get all products of the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handler.ProductResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List products of the authenticated user
      tags:
      - products
    post:
      consumes:
      - application/json
      description: Create a new product for the authenticated user
      parameters:
      - description: Product data
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/handler.createProductRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handler.ProductResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new product
      tags:
      - products
  /products/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a product of the authenticated user
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a product
      tags:
      - products
    get:
      consumes:
      - application/json
      description: Get a specific product by the authenticated user's ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.ProductResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a specific product
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Update an existing product of the authenticated user
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Data to update
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/handler.updateProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.ProductResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a product
      tags:
      - products
  /products/{id}/stock:
    patch:
      consumes:
      - application/json
      description: Update the stock of a product (increment or decrement)
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Stock change data
        in: body
        name: stock
        required: true
        schema:
          $ref: '#/definitions/handler.updateStockRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.ProductResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update product stock
      tags:
      - products
  /users/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return a JWT token
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/handler.loginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.loginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Login
      tags:
      - users
  /users/profile:
    get:
      consumes:
      - application/json
      description: Get the authenticated user's profile information
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.userResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - users
  /users/register:
    post:
      consumes:
      - application/json
      description: Create a new user account
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handler.registerRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handler.userResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Register a new user
      tags:
      - users
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
